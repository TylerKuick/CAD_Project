Parameters:
  BucketName: 
    Description: Bucket name for e-commerce site bucket
    Type: String
    Default: tyler-cad-project-images

Resources: 
  CADProjectVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      InstanceTenancy: "default"
      Tags:
      - Key: "Name"
        Value: "CADProjectVPC" 

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref CADProjectVPC
      CidrBlock: "10.0.0.0/24"

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref CADProjectVPC
      CidrBlock: "10.0.1.0/24"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref CADProjectVPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref CADProjectVPC
      InternetGatewayId: !Ref "InternetGateway"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSub1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnet1"

  PublicSub2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref "PublicSubnet2"

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref "PublicSubnet1"

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref "PublicSubnet2"

  CADProjectDynamoDB:
    UpdateReplacePolicy: Retain
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: CADProjectDB
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: itemID
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      WarmThroughput:
        ReadUnitsPerSecond: 12000
        WriteUnitsPerSecond: 4000
      KeySchema:
        - KeyType: HASH
          AttributeName: itemID
      DeletionProtectionEnabled: false
      TableClass: STANDARD
      Tags:
        - Value: CAD
          Key: Project
      TimeToLiveSpecification:
        Enabled: false
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref "BucketName"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupName: web-server-sg
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref CADProjectVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0

  # AmzEC2Instance: 
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-04823729c75214919
  #     InstanceType: t2.micro
  #     KeyName: vockey
  #     NetworkInterfaces: 
  #       - DeviceIndex: 0
  #         AssociatePublicIpAddress: true
  #         GroupSet:
  #           - !Ref WebServerSecurityGroup
  #         SubnetId: !Ref PublicSubnet1
  #     Tags: 
  #       - Key: Name
  #         Value: Web Server
  #     UserData: 
  #       Fn::Base64: !Sub | 
  #         #!/bin/bash 
  #         sudo yum update -y
  #         sudo amazon-linux-extras install epel -y
  #         sudo yum install stress -y
  #         sudo yum install -y httpd
  #         sudo systemctl start httpd
  #         sudo systemctl enable httpd
  #         sudo yum install -y git
  #         sudo yum install -y curl
          
  #         git clone https://github.com/TylerKuick/CAD_Project
  #         cd ./CAD_Project/Website/CAD_Project
  #         sudo -s
  #         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
  #         export NVM_DIR="$HOME/.nvm"
  #         [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #         nvm install 20
  #         npm i
  #         sudo cp -r dist/* /var/www/html
  #         sudo systemctl restart httpd


  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateName: web-server-launchtemp
      LaunchTemplateData:
        ImageId: ami-04823729c75214919
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/LabInstanceProfile"
        KeyName: vockey
        NetworkInterfaces: 
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref WebServerSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: Web Server
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo yum install -y git
            sudo yum install -y curl
            
            git clone https://github.com/TylerKuick/CAD_Project
            cd ./CAD_Project/Website/CAD_Project
            sudo -s
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 20
            npm i
            sudo cp -r dist/* /var/www/html
            sudo systemctl restart httpd
        
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref CADProjectVPC
      TargetType: instance
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 110
      HealthCheckIntervalSeconds: 300
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: WebTG

  WebASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    Properties:
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs: 
        - !Ref WebTargetGroup

  WebScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 400
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebASG
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification: 
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  WebALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Name: WebALB
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: WebALB

  WebALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref WebALB

  # SNS Topic
  SNSTopic: 
    Type: AWS::SNS::Topic 
    Properties: 
      TopicName: "LostNFound"
      FifoTopic: false

  # SNS Publish Message Function and DB Stream
  notifyNewItem:  
      Type: AWS::Lambda::Function
      Properties:
        Description: Lambda function to notify users of new item in DynamoDB
        FunctionName: notifyNewItem
        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Code: 
          ZipFile: | 
            import json
            import boto3 
            import os 

            sns = boto3.client("sns", region_name="us-east-1")
            SNS_TOPIC_ARN = os.environ['SNS_TOPIC_ARN']

            def lambda_handler(event, context):
                # TODO implement
                for record in event['Records']:
                    if record['eventName'] == 'INSERT':
                        new_item = record['dynamodb']['NewImage']
                        item_name = new_item['itemName']['S']
                        area = new_item['areaFound']['S']
                        date = new_item['dateFound']['S']
                        category = new_item['category']['S']

                        sns.publish(
                            TopicArn= SNS_TOPIC_ARN,
                            Message= f"New item added to {category} category: {item_name} at {area} at {date}",
                            Subject= "New Lost and Found Item Alert",
                            MessageAttributes={
                                'category': {
                                    'DataType': "String",
                                    "StringValue": category 
                                }
                            }
                        )
                return {
                    'statusCode': 200,
                    'body': json.dumps('Successfully published SNS Message')
                }
        Handler: index.lambda_handler
        Runtime: python3.11
        Timeout: 10
        Environment:
          Variables:
            SNS_TOPIC_ARN: !Ref SNSTopic

  # DynamoDB Stream Mappings
  DynamoDBStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt CADProjectDynamoDB.StreamArn 
      FunctionName: !Ref notifyNewItem
      StartingPosition: TRIM_HORIZON
      BatchSize: 1

  # Lost Items Lambda Functions
  getItems:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to get all items from DynamoDB
      FunctionName: getItems
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        ZipFile: | 
          import json
          import boto3 
          from boto3.dynamodb.conditions import Key, Attr

          def lambda_handler(event, context):
              # TODO implement
              dynamo = boto3.resource("dynamodb", region_name="us-east-1")
              table = dynamo.Table('CADProjectDB')
              
              query_params = event.get("queryStringParameters", {})
              search_query = query_params.get('search')
              if not search_query: 
                  response = table.scan()
                  items = response['Items']
              else: 
                  response = table.scan(FilterExpression=Attr('itemNameLower').contains(search_query) | Attr('categoryLower').contains(search_query))
                  items = response['Items']

              return {
                  'statusCode': 200,
                  'headers': {
                    "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                    "Access-Control-Allow-Methods": "OPTIONS,GET,POST",
                    "Access-Control-Allow-Origin": "*",
                    "Content-Type": "application/json"
                  },
                  'body': json.dumps(items)
              }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 10
      
  addItems:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to add items to DynamoDB
      FunctionName: addItems
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code:
        ZipFile: | 
          import json
          import boto3 

          def lambda_handler(event, context):
              # TODO implement
              dynamo = boto3.resource("dynamodb", region_name="us-east-1")
              table = dynamo.Table('CADProjectDB')
              table.put_item(
                  Item= {
                      'itemID': event['itemID'],
                      "itemName": event['itemName'],
                      "itemNameLower": event['itemName'].lower(),
                      "dateFound": event['dateFound'],
                      "areaFound": event['areaFound'],
                      "category": event['category'],
                      "categoryLower": event['category'].lower()
                  }   
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(event)
              }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 10
     
  claimItems:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to delete items in DynamoDB
      FunctionName: claimItems
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        ZipFile: | 
          import boto3
          import json

          # Delete Item from DynamoDB
          def lambda_handler(event, context):
              dynamo = boto3.resource("dynamodb", region_name="us-east-1")
              table = dynamo.Table('CADProjectDB')
              try: 
                  path_parameters = event.get("pathParameters")
                  item_id = path_parameters.get("id") if path_parameters else None
                  response = table.delete_item(Key={
                      "itemID": f"{item_id}"
                      }
                  )
                  
                  statusCode = response['ResponseMetadata']['HTTPStatusCode']
                  
                  return {
                      'statusCode': statusCode,
                      "headers": {
                        "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                        "Access-Control-Allow-Methods": "DELETE,OPTIONS",
                        "Access-Control-Allow-Origin": "*",
                        "Content-Type": "application/json"
                      },
                      "body": json.dumps("Successfully Deleted")
                  }
              except Exception as e: 
                  return {
                      'statusCode': 500,
                      "headers": {
                        "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                        "Access-Control-Allow-Methods": "DELETE,OPTIONS",
                        "Access-Control-Allow-Origin": "*",
                        "Content-Type": "application/json"
                      },
                      "body": json.dumps(f"Error: {str(e)}. Unable to delete item")
                  }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 10

  # S3 Presigned URL Lambda Function
  gets3URL:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to get presigned URL for uploading to S3 
      FunctionName: gets3URL
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        ZipFile: | 
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              # TODO implement
              s3 = boto3.client('s3', region_name="us-east-1")
              
              path_parameters = event.get("pathParameters")
              photoKey = path_parameters.get("photoKey") if path_parameters else None
              body = json.loads(event['body'])
              content_type = body.get("ContentType")
              
              s3Params = {
                  'Bucket': os.environ["S3_BUCKET"],
                  'Key': photoKey,
                  'ContentType': content_type
              }
              response = s3.generate_presigned_url('put_object', Params=s3Params, ExpiresIn=3600)
              
              return {
                  'statusCode': 200,
                  "headers": {
                    "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                    "Access-Control-Allow-Methods": "GET,OPTIONS,POST",
                    "Access-Control-Allow-Origin": "*",
                    "Content-Type": "application/json"
                  },
                  'body': json.dumps(response)
              }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 10
      Environment:
        Variables:
          S3_BUKET: !Ref S3Bucket

  # SNS Subscription Lambda Function
  createSubscription: 
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to create SNS Subscriptions
      FunctionName: createSubscription
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        ZipFile: | 
          import json
          import boto3 
          import os 

          sns = boto3.client('sns', region_name='us-east-1')
          SNS_TOPIC_ARN = os.environ['SNS_TOPIC_ARN']

          def lambda_handler(event, context):
              # TODO implement
              email = event['email'] 
              category = event['category']
              
              if category != "None":
                  filter_policy = {"category": [category]}

                  response = sns.subscribe(
                      TopicArn = SNS_TOPIC_ARN,
                      Protocol="email",
                      Endpoint=email,
                      Attributes={"FilterPolicy": json.dumps(filter_policy)}
                  )
              else: 
                  response = sns.subscribe(
                      TopicArn = SNS_TOPIC_ARN,
                      Protocol="email",
                      Endpoint=email
                  )
                  
              return {
                  'statusCode': 200,
                  'body': json.dumps(response.get("SubscriptionArn"))
              }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 10
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

  # Rekognition Lambda Function
  detectLabels: 
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to generate labels for S3 images
      FunctionName: detectLabels
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        ZipFile: | 
          import json
          import boto3
          import os

          rekognition = boto3.client('rekognition', region_name="us-east-1")
          BUCKET = os.environ['S3_BUCKET_NAME']

          def lambda_handler(event, context): 
              response = rekognition.detect_labels(Image={'S3Object': {'Bucket': BUCKET, 'Name': event['photoKey']}}, MaxLabels=5)

              labels = response['Labels'][0]['Name']

              return {
                  'statusCode': 200,
                  'body': json.dumps(labels)
              }
      Handler: index.lambda_handler
      Runtime: python3.11
      Timeout: 10
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3Bucket

  # API Gateway 
  ApiGateway: 
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "CAD-Backend-API"
      Description: "Backend for Lost and Found Site"

  # Resource Paths
  # /lostItems
  ItemsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "lostItems"
      RestApiId: !Ref ApiGateway
  
  # /lostItems/{id}
  GetByIDResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ItemsResource
      PathPart: "{id}"
      RestApiId: !Ref ApiGateway

  # /notifications
  NotificationsResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "notifications"
      RestApiId: !Ref ApiGateway

  # /imageUpload
  imageUploadResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "imageUpload"
      RestApiId: !Ref ApiGateway

  # /imageUpload/{photoKey}
  photoKeyResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref imageUploadResource 
      PathPart: "{photoKey}"
      RestApiId: !Ref ApiGateway

  # /detectLabels
  labelsResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "detectLabels"
      RestApiId: !Ref ApiGateway

  # Lambda Permissions
  # Lost Items Lambda Permissions
  getItemsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref getItems
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/GET/lostItems
          
  postItemsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref addItems
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/lostItems
      
  deleteItemPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref claimItems
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/DELETE/lostItems/{id}

  # S3 Lambda Permissions
  s3Permission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref gets3URL
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/imageUpload/{photoKey}

  # SNS Lambda Permissions
  snsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref notifyNewItem
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/notifications
  
  # Rekognition Lambda Permissions
  rekogPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref detectLabels
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/detectLabels

  # Methods
  # GET /lostItems
  GetItemsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: getItemsPermission
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "AWS_PROXY"
        Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${getItems.Arn}/invocations
      RequestParameters:
        method.request.querystring.search: false
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /lostItems
  PostItemsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: postItemsPermission
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${addItems.Arn}/invocations
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # DELETE /lostItems/{id}
  DeleteItemMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: deleteItemPermission
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetByIDResource
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "DELETE"
        Type: "AWS_PROXY"
        Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${claimItems.Arn}/invocations
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /imageUpload/{photoKey}
  uploadImageMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: s3Permission
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref photoKeyResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${gets3URL.Arn}/invocations
      RequestParameters:
        method.request.path.photoKey: true
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /notifications
  notificationsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: snsPermission
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref NotificationsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${createSubscription.Arn}/invocations
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /detectLabels
  labelsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: rekogPermission
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref labelsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${detectLabels.Arn}/invocations
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /lostItems
  ItemCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # Enable CORS for /lostItems/{id}
  ItemIdCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetByIDResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      
  # Enable CORS for /uploadItems/{photoKey}
  uploadItemsCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref photoKeyResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /notifications
  notificationsCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref NotificationsResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /detectLabels
  labelsCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref labelsResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Deployment 
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: "dev"
    DependsOn: 
      - GetItemsMethod
      - PostItemsMethod
      - DeleteItemMethod
      - uploadImageMethod
      - notificationsMethod
      - labelsMethod
      - ItemIdCORSMethod
      - ItemCORSMethod
      - uploadItemsCORSMethod
      - notificationsCORSMethod
      - labelsCORSMethod
  
Outputs:
  apiURL:
    Description: URL for API Gateway 
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"