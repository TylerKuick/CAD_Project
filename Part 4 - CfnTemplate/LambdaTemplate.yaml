Parameters: 
  ProjectStackName: 
    Description: Project Stack Name
    Type: String
    Default: "ProjectStack"
    MinLength: 1
    MaxLength: 255
  S3Bucket: 
    Description: Bucket name for lost and found site bucket
    Type: String
    Default: tyler-cad-project-images

Resources:

  # Lost Items Lambda Functions
  getItems:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to get all items from DynamoDB
      FunctionName: getItems
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: functions/getItems.zip
      Handler: getItems.lambda_handler
      Runtime: python3.11
      Timeout: 10
      
  addItems:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to add items to DynamoDB
      FunctionName: addItems
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: functions/addItems.zip
      Handler: addItems.lambda_handler
      Runtime: python3.11
      Timeout: 10
     
  claimItems:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to delete items in DynamoDB
      FunctionName: claimItems
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: functions/claimItems.zip
      Handler: claimItems.lambda_handler
      Runtime: python3.11
      Timeout: 10

  # S3 Presigned URL Lambda Function
  gets3URL:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to get presigned URL for uploading to S3 
      FunctionName: gets3URL
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: functions/gets3URL.zip
      Handler: gets3URL.lambda_handler
      Runtime: python3.11
      Timeout: 10

  # SNS Subscription Lambda Function
  createSubscription: 
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to create SNS Subscriptions
      FunctionName: createSubscription
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code: 
        S3Bucket: !Ref S3Bucket
        S3Key: functions/createSubscription.zip
      Handler: createSubscription.lambda_handler
      Runtime: python3.11
      Timeout: 10
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

  # API Gateway 
  ApiGateway: 
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "CAD-Backend-API"
      Description: "Backend for Lost and Found Site"

  # Resource Paths
  # /lostItems
  ItemsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "lostItems"
      RestApiId: !Ref ApiGateway
  
  # /lostItems/{id}
  GetByIDResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ItemsResource
      PathPart: "{id}"
      RestApiId: !Ref ApiGateway

  # /notifications
  NotificationsResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "notifications"
      RestApiId: !Ref ApiGateway

  # /imageUpload
  imageUploadResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "imageUpload"
      RestApiId: !Ref ApiGateway

  # /imageUpload/{photoKey}
  photoKeyResource: 
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref imageUploadResource 
      PathPart: "{photoKey}"
      RestApiId: !Ref ApiGateway

  # Methods
  # GET /lostItems
  GetItemsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "AWS"
        Uri: !Sub
          - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${getItems.Arn}/invocations
          - lambdaArn: !GetAtt getItems.Arn
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /lostItems
  PostItemsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${addItems.Arn}/invocations
          - lambdaArn: !GetAtt addItems.Arn
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # DELETE /lostItems/{id}
  DeleteItemMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetByIDResource
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "DELETE"
        Type: "AWS_PROXY"
        Uri: !Sub
          - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${claimItems.Arn}/invocations
          - lambdaArn: !GetAtt claimItems.Arn
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /imageUpload/{photoKey}
  uploadImageMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref photoKeyResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${gets3URL.Arn}/invocations
          - lambdaArn: !GetAtt gets3URL.Arn
      RequestParameters:
        method.request.path.photoKey: true
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /notifications
  notificationsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref NotificationsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${createSubscription.Arn}/invocations
          - lambdaArn: !GetAtt createSubscription.Arn
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  # Lost Items Lambda Permissions
  getItemsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref getItems
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/GET/lostItems
          
  postItemsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref addItems
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/lostItems
      
  deleteItemPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref claimItems
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/DELETE/lostItems/{id}

  # S3 Lambda Permissions
  s3Permission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref gets3URL
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/imageUpload/{photoKey}

  # SNS Lambda Permissions
  snsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref notifyNewItem
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:us-east-1:${AWS::AccountId}:${ApiGateway}/*/POST/notifications
      
  # Enable CORS for /lostItems
  ItemCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ItemsResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # Enable CORS for /lostItems/{id}
  ItemIdCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetByIDResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      
  # Enable CORS for /uploadItems/{photoKey}
  uploadItemsCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref photoKeyResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /notifications
  notificationsCORSMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref NotificationsResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Deployment 
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: "dev"
    DependsOn: 
      - GetItemsMethod
      - PostItemsMethod
      - DeleteItemMethod
      - uploadImageMethod
      - notificationsMethod
      - ItemIdCORSMethod
      - ItemCORSMethod
      - uploadItemsCORSMethod
      - notificationsCORSMethod
  
Outputs:
  apiURL:
    Description: URL for API Gateway 
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"


  

